// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=.js"
// @generated from file arian/v1/user_services.proto (package arian.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckCredentialExistsRequest, CheckCredentialExistsResponse, CheckUserExistsRequest, CheckUserExistsResponse, CountCredentialsForUserRequest, CountCredentialsForUserResponse, CreateCredentialRequest, CreateCredentialResponse, CreateUserRequest, CreateUserResponse, DeleteAllCredentialsForUserRequest, DeleteAllCredentialsForUserResponse, DeleteCredentialRequest, DeleteCredentialResponse, DeleteUserRequest, DeleteUserResponse, GetCredentialByCredentialIDRequest, GetCredentialByCredentialIDResponse, GetCredentialForUserRequest, GetCredentialForUserResponse, GetCredentialRequest, GetCredentialResponse, GetUserByEmailRequest, GetUserByEmailResponse, GetUserRequest, GetUserResponse, ListCredentialsRequest, ListCredentialsResponse, ListUsersRequest, ListUsersResponse, SetUserDefaultAccountRequest, SetUserDefaultAccountResponse, UpdateCredentialSignCountByCredentialIDRequest, UpdateCredentialSignCountByCredentialIDResponse, UpdateUserDisplayNameRequest, UpdateUserDisplayNameResponse, UpdateUserRequest, UpdateUserResponse } from "./user_services_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * User management service
 *
 * @generated from service arian.v1.UserService
 */
export const UserService = {
  typeName: "arian.v1.UserService",
  methods: {
    /**
     * @generated from rpc arian.v1.UserService.GetUser
     */
    getUser: {
      name: "GetUser",
      I: GetUserRequest,
      O: GetUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.GetUserByEmail
     */
    getUserByEmail: {
      name: "GetUserByEmail",
      I: GetUserByEmailRequest,
      O: GetUserByEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.CreateUser
     */
    createUser: {
      name: "CreateUser",
      I: CreateUserRequest,
      O: CreateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.UpdateUser
     */
    updateUser: {
      name: "UpdateUser",
      I: UpdateUserRequest,
      O: UpdateUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.UpdateUserDisplayName
     */
    updateUserDisplayName: {
      name: "UpdateUserDisplayName",
      I: UpdateUserDisplayNameRequest,
      O: UpdateUserDisplayNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.SetUserDefaultAccount
     */
    setUserDefaultAccount: {
      name: "SetUserDefaultAccount",
      I: SetUserDefaultAccountRequest,
      O: SetUserDefaultAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.DeleteUser
     */
    deleteUser: {
      name: "DeleteUser",
      I: DeleteUserRequest,
      O: DeleteUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.ListUsers
     */
    listUsers: {
      name: "ListUsers",
      I: ListUsersRequest,
      O: ListUsersResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.UserService.CheckUserExists
     */
    checkUserExists: {
      name: "CheckUserExists",
      I: CheckUserExistsRequest,
      O: CheckUserExistsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * WebAuthn credential management service
 *
 * @generated from service arian.v1.CredentialService
 */
export const CredentialService = {
  typeName: "arian.v1.CredentialService",
  methods: {
    /**
     * @generated from rpc arian.v1.CredentialService.ListCredentials
     */
    listCredentials: {
      name: "ListCredentials",
      I: ListCredentialsRequest,
      O: ListCredentialsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.GetCredential
     */
    getCredential: {
      name: "GetCredential",
      I: GetCredentialRequest,
      O: GetCredentialResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.GetCredentialByCredentialID
     */
    getCredentialByCredentialID: {
      name: "GetCredentialByCredentialID",
      I: GetCredentialByCredentialIDRequest,
      O: GetCredentialByCredentialIDResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.GetCredentialForUser
     */
    getCredentialForUser: {
      name: "GetCredentialForUser",
      I: GetCredentialForUserRequest,
      O: GetCredentialForUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.CreateCredential
     */
    createCredential: {
      name: "CreateCredential",
      I: CreateCredentialRequest,
      O: CreateCredentialResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.UpdateCredentialSignCountByCredentialID
     */
    updateCredentialSignCountByCredentialID: {
      name: "UpdateCredentialSignCountByCredentialID",
      I: UpdateCredentialSignCountByCredentialIDRequest,
      O: UpdateCredentialSignCountByCredentialIDResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.DeleteCredential
     */
    deleteCredential: {
      name: "DeleteCredential",
      I: DeleteCredentialRequest,
      O: DeleteCredentialResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.DeleteAllCredentialsForUser
     */
    deleteAllCredentialsForUser: {
      name: "DeleteAllCredentialsForUser",
      I: DeleteAllCredentialsForUserRequest,
      O: DeleteAllCredentialsForUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.CountCredentialsForUser
     */
    countCredentialsForUser: {
      name: "CountCredentialsForUser",
      I: CountCredentialsForUserRequest,
      O: CountCredentialsForUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc arian.v1.CredentialService.CheckCredentialExists
     */
    checkCredentialExists: {
      name: "CheckCredentialExists",
      I: CheckCredentialExistsRequest,
      O: CheckCredentialExistsResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

